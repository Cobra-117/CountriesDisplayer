@page "/countrieblazor"
@using MudBlazor
@inject CountryService CountryService
@layout MainLayout

<h3>Countries List</h3>


<MudButton OnClick="SortByName" Variant=" MudBlazor.Variant.Filled" Color="Color.Primary" >Sort by Name</MudButton>
<MudButton OnClick="SortByPopulation" Variant="MudBlazor.Variant.Filled" Color="Color.Secondary">Sort by Population</MudButton>

<MudTable Items="@countries" Dense="true" Hover="true" Bordered="true" Striped="true">
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Population</MudTh>
    </HeaderContent>
    <RowTemplate Context="country">
        <MudTd>@country.Name.Common</MudTd>
         <MudTd>@FormatPopulation(country.Population)</MudTd>
    </RowTemplate>
</MudTable>

@code {
    private List<Country> countries = new List<Country>();
    
    private string FormatPopulation(long population)
    {
        if (population >= 1_000_000_000)
        {
            return $"{population / 1_000_000_000.0:N1} billion";
        }
        if (population >= 1_000_000)
        {
            return $"{population / 1_000_000.0:N1} million";
        }
        if (population >= 1_000)
        {
            return $"{population / 1_000.0:N1}K";
        }
        return population.ToString("N0"); // No abbreviation for smaller numbers
    }
    
    private void SortByName()
    {
        countries = countries.OrderBy(c => c.Name.Common).ToList();
    }

    private void SortByPopulation()
    {
        countries = countries.OrderByDescending(c => c.Population).ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        countries = await CountryService.GetCountriesAsync();
        SortByPopulation();
    }
}
